/*
异常的分类：
1〉编译时被检测异常：只要是Exception和其子类都是，除了特殊子类RuntimeException体系
   这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式
   这样的问题都可以针对性的处理
2〉运行时异常（编译时不检测异常）：就是Exception中的RuntimeException和其子类
   这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的或者引发了内部状态的改变导致的
   要么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止，让调用者对代码进行修正

所以自定义异常时，要么继承Exception;要么继承RuntimeException

throws 和 throw的区别：
1〉throws使用在函数上
   throw使用在函数内
2〉throws抛出的是异常类，可以抛出多个，用逗号隔开
   throw抛出的是异常对象
*/
				
class FuShuIndexException extends RuntimeException  //Exception
{
	/*
	FuShuIndexException()
	{
	}
	*/

	FuShuIndexException(String msg)
	{
		super(msg);
	}
}

class Demo
{
	public int method(int[] arr,int index) // throws FuShuIndexException
	{
		if(arr==null)
		throw new NullPointerException("数组的引用不能为空!");
		
		if(index>=arr.length)
		{
			throw new ArrayIndexOutOfBoundsException("数组的角标越界了，你是不是疯了？:"+index);
		}

		if(index<0)
		{
			throw new FuShuIndexException("角标变为负数了");
		}
		return arr[index];

		//System.out.println(arr[index]); throw new ArrayIndexOutOfBoundsException(index)
		//System.out.println("haha");
	}
}
class ExceptionDemo3
{
	public static void main(String[] args)  //throws FuShuIndexException
	{	
		int[] arr=new int[3];
		
		Demo d=new Demo();
		int num=d.method(arr,-30); 
		System.out.println("num="+num);
		System.out.println("over");
	}
}

/*
class Person
{
	private String name;
	person(String name)
	{	
		this.name=name;
	}
	public String getName()	
	{
		return name;
	}
}
class Student extends Person
{
	Student(String name)
	{
		super(name);
	}
}
*/