/*
买票实例：多线程的应用
*/

/*
线程安全问题产生的原因：

[产生安全问题的前提]
1> 多个线程在操作共享的数据
2〉在操作共享数据的线程代码有多条

当一个线程在执行操作共享数据的多条代码的过程中，其他线程参与了运算
就会导致线程安全问题的产生
*/

class Ticket implements Runnable //extends Thread
{	
	private  int num = 100;
	
	public void run()
	{
		while(true)
		{
			if(num>0)
			{
				try{Thread.sleep(10);}catch (InterruptedException e){}
				System.out.println(Thread.currentThread().getName()+"......sale....."+num--);
			}
		}
	}
}

class TicketDemo
{
	public static void main(String[] args)
	{

		Ticket t = new Ticket(); //创建一个线程任务对象
	//	Ticket tt = new Ticket();//创建一个线程任务对象

		Thread t1 = new Thread(t);
		Thread t2 = new Thread(t);
		Thread t3 = new Thread(t);
		Thread t4 = new Thread(t);
	//	Thread t3 = new Thread(tt);
	//	Thread t4 = new Thread(tt);
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();

		/*
		Ticket t1 = new Ticket();
		Ticket t2 = new Ticket();
		Ticket t3 = new Ticket();
		Ticket t4 = new Ticket();

		t1.start();
		t1.start();
		t1.start();
		t1.start();
		*/

	}
}

//-----------------------------------------------------------------------------------------------------------------
/*
	卖票：1〉四个窗口卖100张 ---〉Runnable或者Thread->static
	        2〉四个窗口每个窗口各卖100张---->Thread
*/
