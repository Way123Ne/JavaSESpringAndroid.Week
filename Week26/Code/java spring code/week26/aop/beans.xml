<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd" 
				>

<!-- 配置被代理的对象 -->
<bean id="testService" class="com.wayne.aop.TestService">
<property name="name" value="wayne" />
</bean>
<!-- 配置前置通知 意:id==前置通知类文件名，不像其他首字母小写

	proxyFactoryBean implements TestServiceInter,TestServiceInter2{
		public void sayHello();
	}
	
	思考
	interface Inter1{};
	class A implements Inter1,Inter2{
	}
	Inter1 a=new A();
	Inter2 b=(Inter2)a;
-->
<bean id="MyMethodBeforeAdvice" class="com.wayne.aop.MyMethodBeforeAdvice" /> 
<!-- 配置后置通知 :注意:id==后置通知类文件名，不像其他首字母小写-->
<bean id="MyAfterReturningAdvice" class="com.wayne.aop.MyAfterReturningAdvice"/>
<!-- 配置环绕通知 -->
<bean id="MyMethodInterceptor" class="com.wayne.aop.MyMethodInterceptor"></bean>
<!-- 配置异常通知 -->
<bean id="MyThrowsAdvice" class="com.wayne.aop.MyThrowsAdvice"></bean>
<!-- 配置引入通知 -->
<!-- 定义前置通知的切入点 -->
<bean id="MyMethodBeforeAdviceFilter" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
	<property name="advice" ref="MyMethodBeforeAdvice"></property>
	<property name="mappedNames">
		<list>
		<value>sayHello</value>
		</list>
	</property>
</bean>
<!-- 配置代理对象 -->
<bean id="proxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean">
<!-- 代理接口集 -->
<property name="proxyInterfaces">
	<list>
		<value>com.wayne.aop.TestServiceInter</value>
		<value>com.wayne.aop.TestServiceInter2</value>
	</list>
</property>
<!-- 把通知织入到代理对象  -->
<property name="interceptorNames">
	<!-- 相当于包MyMethodBeforeAdvice前置通知和代理对象关联,我们也
	可以把通知看出拦截器,struts2核心拦截器 -->
	<list>
	<!-- 使用自定义切入点来控制前置通知 -->
	<value>MyMethodBeforeAdviceFilter</value>
	<value>MyAfterReturningAdvice</value>
	<value>MyMethodInterceptor</value>
	<value>MyThrowsAdvice</value>
	</list>
</property>
<!-- 配置被代理对象,可以指定 -->
<property name="target" ref="testService"/>
</bean>
</beans>